#!/usr/bin/env python
PACKAGE = "bricks_detection"

from dynamic_reconfigure.parameter_generator_catkin import *
import roslib
roslib.load_manifest(PACKAGE)

gen = ParameterGenerator()

gen.add("colors_json_path",     str_t, 0, "Absolute path to colors json file", "default")
gen.add("min_points_per_color", int_t, 0, "Min points per color", 0, 0, 10000)

gen.add("enable_voxel_grid", bool_t,   0, "Voxel grid enable", False)
gen.add("voxel_leaf_size",   double_t, 0, "Voxel grid leaf size", 0.02, 0, 2)

gen.add("enable_distance_filter", bool_t,   0, "Distance filter enable", False)
gen.add("min_distance_limit",     double_t, 0, "Min distance limit", 0, 0, 2)
gen.add("max_distance_limit",     double_t, 0, "Max distance limit", 4.0, 0, 10)

gen.add("enable_sor",             bool_t,   0, "Statistical outlier removal enable", False)
gen.add("sor_mean_k",             int_t,    0, "Mean K for sor filter", 50, 0, 100)
gen.add("sor_std_dev_mul_thresh", double_t, 0, "StdDevMulThresh for sor filter", 1.0, 0, 5)

gen.add("max_ransac_iterations", int_t, 0, "Max RANSAC iterations", 3, 0, 50)
gen.add("plane_coef0", double_t, 0, "Max RANSAC iterations", 0.2, 0, 2)
gen.add("plane_coef1", double_t, 0, "Max RANSAC iterations", 0.2, 0, 2)
gen.add("plane_coef2", double_t, 0, "Max RANSAC iterations", 0.2, 0, 2)

exit(gen.generate(PACKAGE, "bricks_detection_node", "pointcloud_filters"))
