<?xml version="1.0"?>
<launch>
  <arg name="robot_model" default="mbzirc2020" />
  <arg name="agent_id" default="1" />
  <arg name="color" default="Orange" />
  <arg name="flight_level" default="2.0" />
  <arg name="x" default="10" />
  <arg name="y" default="0" />
  <arg name="z" default="0" />
  <arg name="yaw" default="0" />
  <arg name="ual_backend" default="mavros" />
  <arg name="mode" default="sim"/>
  
  <group ns="$(arg robot_model)_$(arg agent_id)">
    <param name="flight_level" value="$(arg flight_level)"/>  <!-- TODO: Makes no sense here! -->

    <!-- TODO: all transforms needed? -->  <!-- TODO: Use robot_description + state_publihser? -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="uav_base_to_gripper_tf" args="0 0 0 0 0 0 $(arg robot_model)_$(arg agent_id)/base_link $(arg robot_model)_$(arg agent_id)/gripper_link" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="uav_base_to_camera_tf" args="0 0 -0.275 0 1.57079632679 0 $(arg robot_model)_$(arg agent_id)/base_link $(arg robot_model)_$(arg agent_id)/camera_link" />

    <node if="$(eval ual_backend == 'gazebo_light')" pkg="px4_bringup" type="spawn_gzmodel.py" name="spawn_gzmodel_$(arg agent_id)" output="screen"
    args="-model=$(arg robot_model) -id=$(arg agent_id) -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg yaw) -description_package=uavs_description -material=$(arg color) -frame_id=arena -ual_backend=gazebo_light"/>

    <include if="$(eval ual_backend == 'mavros')" file="$(find px4_bringup)/launch/spawn_robot.launch">
        <arg if="$(eval mode == 'sim')" name="mode" value="sitl"/>
        <arg if="$(eval mode == 'real')" name="mode" value="custom"/>
        <arg if="$(eval mode == 'real')" name="fcu_url" value="serial:///dev/pixhawk:921600"/>
        <arg name="description_package" value="uavs_description"/>
        <arg name="robot_model" value="$(arg robot_model)"/>
        <arg name="id" value="$(arg agent_id)"/>
        <arg name="material" value="$(arg color)"/>
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="yaw" value="$(arg yaw)"/>
        <arg name="frame_id" value="arena"/>
        <arg name="append_xacro_args" value="challenge=2"/>
        <arg name="rtcm_topic" value="/rtcm_stream"/>
    </include>

    <node pkg="robot_action_servers" type="uav_action_server" name="server" output="screen">
      <param name="uav_id" value="$(arg agent_id)"/>
      <param name="pose_frame_id" value="arena"/>
      <param name="home_pose_parent_frame" value="arena"/>
      <param name="ual_backend" value="$(arg ual_backend)"/>
      <param name="model_name" value="$(arg robot_model)_$(arg agent_id)"/>
      <rosparam param="home_pose" subst_value="True">[$(arg x), $(arg y), $(arg z)]</rosparam>
      <param name="position_th" value="1.00"/>
      <param name="orientation_th" value="0.75"/>
      <param name="hold_pose_time" value="0"/>
    </node>

    <node name="object_detection" pkg="hue_object_detection" type="hsv_detection_node" output="screen">
      <param name="tf_prefix" value="$(arg robot_model)_$(arg agent_id)" />
      <param name="camera_url" value="camera_0" />
    </node>

    <node if="$(eval mode == 'real')" name="actuators" pkg="actuators_system" type="actuators_system_node">
      <param name="serial_path" value="/dev/actuators"/>
      <param name="serial_baudrate" value="9600"/>
    </node>

    <!-- <node if="$(eval mode == 'real')" name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
      <param name="serial_port"         type="string" value="/dev/rplidar"/>
      <param name="serial_baudrate"     type="int"    value="256000"/>
      <param name="frame_id"            type="string" value="$(arg robot_model)_$(arg agent_id)/laser_link"/>
      <param name="inverted"            type="bool"   value="false"/>
      <param name="angle_compensate"    type="bool"   value="true"/>
      <param name="scan_mode"           type="string" value="Stability"/>
    </node> -->

    <!-- <node if="$(eval mode == 'sim')" name="sf11" pkg="sf11_driver" type="sf11_sim_node" output="screen">
      <param name="frame_id" type="string" value="$(arg robot_model)_$(arg agent_id)/sf11_link"/>
    </node> -->

    <!-- <node if="$(eval mode == 'real')" name="sf11" pkg="sf11_driver" type="sf11_driver_node" output="screen">
      <param name="frame_id" type="string" value="$(arg robot_model)_$(arg agent_id)/sf11_link"/>
      <param name="serial_path" value="/dev/sf11"/>
      <param name="serial_baudrate" value="115200"/>
      <param name="publish_rate" value="20"/>
    </node> -->

    <include if="$(eval mode == 'real')" file="$(find realsense2_camera)/launch/rs_rgbd.launch">
      <arg name="enable_pointcloud"   value="false"/>

      <arg name="enable_depth"        value="true"/>
      <arg name="enable_infra1"       value="true"/>
      <arg name="enable_infra2"       value="true"/>

      <arg name="enable_color"        value="true"/>
      <arg name="color_width"         value="640"/>
      <arg name="color_height"        value="480"/>
    </include>

  </group>
</launch>
