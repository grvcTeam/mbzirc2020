#!/usr/bin/env python
import rospy
import numpy as np

import tf
import tf2_ros
import geometry_msgs.msg
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu
from geometry_msgs.msg import PoseStamped

def rosquat_nparray(quat):
    array = np.array([quat.x, quat.y, quat.z, quat.w])
    return array

class OdomStaticTransf:
    def __init__(self):
        self.sub_mocap = rospy.Subscriber('/vrpn_client_node/RigidBody1/pose', PoseStamped, self.mocap_callback)

        # MOCAP
        self.has_mocap = False
        self.first_mocap = PoseStamped()
        self.mocap_x = 0 # meters
        self.mocap_y = 0 # meters
        self.mocap_yaw = 0 # rad

    def mocap_callback(self, msg):
        if not self.has_mocap:
            self.first_mocap = msg
            self.sub_mocap.unregister()
            self.mocap_x = msg.pose.position.x
            self.mocap_y = msg.pose.position.y
            self.mocap_z = msg.pose.position.z
            self.mocap_yaw = tf.transformations.euler_from_quaternion(rosquat_nparray(msg.pose.orientation))[2]
            self.has_mocap = True

if __name__ == '__main__':
    rospy.init_node('world_odom_rl_stat_trans')

    data = OdomStaticTransf()

    # Waits until it has all the data
    while not(data.has_mocap):
        rospy.sleep(0.1)

    theta = data.mocap_yaw

    broadcaster = tf2_ros.StaticTransformBroadcaster()
    static_transformStamped = geometry_msgs.msg.TransformStamped()

    static_transformStamped.header.stamp = rospy.Time.now()
    static_transformStamped.header.frame_id = "world"
    static_transformStamped.child_frame_id = 'odom_rl'

    static_transformStamped.transform.translation.x = data.mocap_x
    static_transformStamped.transform.translation.y = data.mocap_y
    static_transformStamped.transform.translation.z = 0

    quat = tf.transformations.quaternion_from_euler(0, 0, theta)
    static_transformStamped.transform.rotation.x = quat[0]
    static_transformStamped.transform.rotation.y = quat[1]
    static_transformStamped.transform.rotation.z = quat[2]
    static_transformStamped.transform.rotation.w = quat[3]

    broadcaster.sendTransform(static_transformStamped)
    rospy.spin()
