<!-- 
The MIT License (MIT)
Copyright (c) 2016 GRVC University of Seville

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
-->
<launch>

    <env name="GAZEBO_RESOURCE_PATH" value="$(find challenge_worlds)" />

    <arg name="multi" default="true"/> <!-- To spawn only one robot, change "default" to false -->
    <arg name="ns_prefix" default="uav_"/>
    <arg name="mode" default="sitl"/>
    <arg name="pose_frame_id" default="arena"/><!-- To publish ual/pose in other frame than local, e.g. map -->
    <arg name="ual_server" default="on"/>
    <arg name="ual_pub_rate" default="30.0"/>
    <arg name="mavros_offboard_rate" default="30.0"/>

    <group if="$(eval mode=='sitl')">
        <!-- Launch Gazebo simulation -->
        <rosparam param="/use_sim_time">true</rosparam>
        <node pkg="px4_bringup" type="launch_gzworld.py" name="gazebo_world" output="screen"
        args="-physics=ode -add_model_path=$(find challenge_worlds)/models -world=$(find challenge_worlds)/worlds/challenge3.world">
            <rosparam param="sim_origin">[37.558542, -5.931074, 7.89]</rosparam><!-- [lat,lon,alt] -->
        </node>
    </group>

    <!-- Launch robots. Argument mode can be:
        - sitl: for software in the loop simulation
        - serial: for serial connection to px4
        - udp: for udp connection to px4
        - custom: to fully customize fcu and gcs urls
    -->
    <!-- Launch robot id=1 -->
    <include file="$(find px4_bringup)/launch/spawn_robot.launch" ns="$(arg ns_prefix)1">
        <arg name="robot_model" value="mbzirc2020"/>
        <arg name="description_package" value="uavs_description"/>
        <arg name="id" value="1"/>
        <arg name="material" value="Orange"/>
        <arg name="mode" value="$(arg mode)"/>
        <arg name="x" value="0"/>
        <arg name="y" value="0"/>
        <arg name="z" value="0"/>
        <arg name="yaw" value="0"/>
    </include>

    <group if="$(arg multi)">
        <!-- Launch robot id=2 -->
        <include file="$(find px4_bringup)/launch/spawn_robot.launch" ns="$(arg ns_prefix)2">
            <arg name="robot_model" value="mbzirc2020"/>
            <arg name="description_package" value="uavs_description"/>
            <arg name="id" value="2"/>
            <arg name="material" value="Indigo"/>
            <arg name="mode" value="sitl"/>
            <arg name="x" value="10"/>
            <arg name="y" value="0"/>
            <arg name="z" value="0"/>
            <arg name="yaw" value="0"/>
        </include>
        <!-- Launch robot id=3 -->
        <include file="$(find px4_bringup)/launch/spawn_robot.launch" ns="$(arg ns_prefix)3">
            <arg name="robot_model" value="mbzirc2020"/>
            <arg name="description_package" value="uavs_description"/>
            <arg name="id" value="3"/>
            <arg name="material" value="ZincYellow"/>
            <arg name="mode" value="sitl"/>
            <arg name="x" value="0"/>
            <arg name="y" value="10"/>
            <arg name="z" value="0"/>
            <arg name="yaw" value="0"/>
        </include>
    </group>

    <!-- Launch UAL server for uav id=1 -->
    <node pkg="uav_abstraction_layer" type="server" name="ual" ns="$(arg ns_prefix)1" output="screen">
        <param name="uav_id" value="1"/>
        <param name="pose_frame_id" value="$(arg pose_frame_id)"/>
        <param name="ual_server" value="$(arg ual_server)"/>
        <param name="ual_pub_rate" value="$(arg ual_pub_rate)"/>
        <param name="mavros_offboard_rate" value="$(arg mavros_offboard_rate)"/>
        <param name="home_pose_parent_frame" value="arena"/><!-- default= map -->
        <!-- Define home pose relative to global map frame -->
        <rosparam param="home_pose">[0, 0, 0]</rosparam><!-- [x,y,z] -->
        <!-- Define the global map frame geo position and let the UAL estimate the relative home pose -->
        <!-- <rosparam param="map_origin_geo">[37.558542, -5.931074, 7.89]</rosparam> --><!-- [lat,lon,alt] -->
    </node>

    <group if="$(arg multi)">
        <!-- Launch UAL server for uav id=2 -->
        <node pkg="uav_abstraction_layer" type="server" name="ual" ns="$(arg ns_prefix)2" output="screen">
            <param name="uav_id" value="2"/>
            <param name="pose_frame_id" value="$(arg pose_frame_id)"/>
            <param name="ual_server" value="$(arg ual_server)"/>
            <param name="ual_pub_rate" value="$(arg ual_pub_rate)"/>
            <param name="mavros_offboard_rate" value="$(arg mavros_offboard_rate)"/>
            <param name="home_pose_parent_frame" value="map"/><!-- default= map -->
            <!-- Define home pose relative to global map frame -->
            <rosparam param="home_pose">[-10, 10, 0]</rosparam><!-- [x,y,z] -->
            <!-- Define the global map frame geo position and let the UAL estimate the relative home pose -->
            <!-- <rosparam param="map_origin_geo">[37.558542, -5.931074, 7.89]</rosparam> --><!-- [lat,lon,alt] -->
        </node>
        <!-- Launch UAL server for uav id=3 -->
        <node pkg="uav_abstraction_layer" type="server" name="ual" ns="$(arg ns_prefix)3" output="screen">
            <param name="uav_id" value="3"/>
            <param name="pose_frame_id" value="$(arg pose_frame_id)"/>
            <param name="ual_server" value="$(arg ual_server)"/>
            <param name="ual_pub_rate" value="$(arg ual_pub_rate)"/>
            <param name="mavros_offboard_rate" value="$(arg mavros_offboard_rate)"/>
            <param name="home_pose_parent_frame" value="map"/><!-- default= map -->
            <!-- Define home pose relative to global map frame -->
            <rosparam param="home_pose">[10, 10, 0]</rosparam><!-- [x,y,z] -->
            <!-- Define the global map frame geo position and let the UAL estimate the relative home pose -->
            <!-- <rosparam param="map_origin_geo">[37.558542, -5.931074, 7.89]</rosparam> --><!-- [lat,lon,alt] -->
        </node>
    </group>
    
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_arena_broadcaster" args="2 2 0 0 0 0.5 map arena"/>


    <!-- <node name="slam_gmapping" pkg="gmapping" type="slam_gmapping">
       <remap from="/scan" to="/mbzirc2020_1/hokuyo_laser"/>
       <remap from="/map" to="/map1"/>
       <param name="odom_frame" value="odom"/>
       <param name="base_frame" value="uav_1/base_link"/>
    </node> -->


  <!-- <arg name="geotiff_map_file_path" default="$(find hector_geotiff)/maps"/> -->

  <!-- <param name="/use_sim_time" value="true"/> -->

  <!-- <node pkg="rviz" type="rviz" name="rviz"
    args="-d $(find hector_slam_launch)/rviz_cfg/mapping_demo.rviz"/>

  <node pkg="tf2_ros" type="static_transform_publisher" name="map_base_link_broadcaster" args="0 0 0 0 0 0 1 map base_link"/>
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_frame_to_laser_broadcaster" args="0 0 0.5 0 0 0 1 base_link hokuyo_frame"/> -->

  <!-- <include file="$(find hector_mapping)/launch/mapping_default.launch">
    <arg name="base_frame" value="base_link"/>
    <arg name="odom_frame" value="base_link"/>
    <arg name="scan_topic" value="/mbzirc2020_1/hokuyo_laser"/>    
  </include> -->

  <!-- <include file="$(find hector_geotiff)/launch/geotiff_mapper.launch">
    <arg name="trajectory_source_frame_name" value="base_link"/>
    <arg name="map_file_path" value="$(arg geotiff_map_file_path)"/>
  </include> -->
  
  <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_base_link_broadcaster" args="0 0 0 0 0 0 1 /uav_1/odom /uav_1/base_link 100"/> -->

</launch>
