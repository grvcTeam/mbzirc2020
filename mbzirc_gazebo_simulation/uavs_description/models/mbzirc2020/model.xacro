<?xml version="1.0"?>

<robot name="mbzirc2020" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Properties that can be assigned at build time as arguments.
  Is there a reason not to make all properties arguments?
  -->
  <xacro:arg name='robot_id' default='1' />  
  <xacro:arg name='mavlink_addr' default='INADDR_ANY' />
  <xacro:arg name='mavlink_udp_port' default='14560' />
  <xacro:arg name='visual_material' default='DarkGrey' />
  <xacro:arg name='enable_mavlink_interface' default='true' />
  <xacro:arg name='enable_gps_plugin' default='true' />
  <xacro:arg name='gps_noise' default='true' />
  <xacro:arg name='enable_ground_truth' default='false' />
  <xacro:arg name='enable_logging' default='false' />
  <xacro:arg name='challenge' default='2' />

  <!-- macros for gazebo plugins, sensors -->
  <xacro:include filename="$(find robots_description)/urdf/component_snippets.xacro" />

  <!-- Instantiate mbzirc "mechanics" -->
  <xacro:include filename="$(find uavs_description)/models/mbzirc2020/geometry.xacro" />

  <xacro:if value="${$(arg challenge) == 2}">
    <!-- Install magnetic gripper -->
    <xacro:include filename="$(find mbzirc_gazebo_plugins)/urdf/magnetic_gripper.xacro" />
    <xacro:magnetic_gripper parent="base_link" robot_name="mbzirc2020_$(arg robot_id)">
      <origin xyz="0 0 -0.275" rpy="0 0 0" />
    </xacro:magnetic_gripper>
    <!-- Install camera facing down -->
    <xacro:camera_macro 
      namespace="${namespace}"
      parent_link="base_link"
      camera_suffix="0"
      frame_rate="10"
      horizontal_fov="1.07079633"
      image_width="800"
      image_height="600"
      image_format="R8G8B8"
      min_distance="0.01"
      max_distance="100"
      noise_mean="0"
      noise_stddev="0"
      enable_visual="true"
      >
      <box size="0.01 0.01 0.01"/>
      <origin xyz="0 0 -0.295" rpy="0 1.57079632679 0" />
    </xacro:camera_macro>
  </xacro:if>
  
<!-- Install Teraranger Evo frontal -->
  <!-- <xacro:teraranger_macro
    namespace="${model_name}"
    parent_link="base_link"
    teraranger_suffix="0">
  </xacro:teraranger_macro> -->

  <xacro:if value="${$(arg challenge) == 3}">
    <!-- Install fake camera for fire detection -->
    <xacro:include filename="$(find mbzirc_gazebo_plugins)/urdf/fake_camera.xacro" />
    <xacro:fake_camera parent="base_link" robot_name="mbzirc2020_$(arg robot_id)">
      <origin xyz="0.5 0 -0.27" rpy="0 1.57 0" />
    </xacro:fake_camera>

    <!-- KINECT -->
    <link name="kinect_link">
      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      </inertial>
      <self_collide>0</self_collide>
      <enable_wind>0</enable_wind>
      <kinematic>0</kinematic>
      <pose frame=''>0 0 0 0 -0 0</pose>
      <visual name='visual'>
        <geometry>
          <box size="0.01 0.01 0.01"/>
          <!-- <mesh filename="package://uavs_description/models/mbzirc2020/meshes/kinect.dae" scale="0.01 0.01 0.01" /> -->
          <!-- <mesh>
            <uri>model://kinect/meshes/kinect.dae</uri>
          </mesh> -->
        </geometry>
        <!-- <material>
          <shader type='pixel'/>
        </material> -->
        <pose frame=''>0 0 0 0 -0 0</pose>
        <transparency>0</transparency>
        <cast_shadows>1</cast_shadows>
      </visual>
      <collision name='collision'>
        <laser_retro>0</laser_retro>
        <max_contacts>10</max_contacts>
        <pose frame=''>0 0 0 0 -0 0</pose>
        <geometry>
           <box size="0.01 0.01 0.01"/>
          <!-- <mesh filename="package://uavs_description/models/mbzirc2020/meshes/kinect.dae" scale="1 1 1" /> -->
          <!-- <box>
            <size>0.073 0.276 0.072</size>
          </box> -->
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu>1</mu>
              <mu2>1</mu2>
              <fdir1>0 0 0</fdir1>
              <slip1>0</slip1>
              <slip2>0</slip2>
            </ode>
            <torsional>
              <coefficient>1</coefficient>
              <patch_radius>0</patch_radius>
              <surface_radius>0</surface_radius>
              <use_patch_radius>1</use_patch_radius>
              <ode>
                <slip>0</slip>
              </ode>
            </torsional>
          </friction>
          <bounce>
            <restitution_coefficient>0</restitution_coefficient>
            <threshold>1e+06</threshold>
          </bounce>
          <contact>
            <collide_without_contact>0</collide_without_contact>
            <collide_without_contact_bitmask>1</collide_without_contact_bitmask>
            <collide_bitmask>1</collide_bitmask>
            <ode>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <kp>1e+13</kp>
              <kd>1</kd>
              <max_vel>0.01</max_vel>
              <min_depth>0</min_depth>
            </ode>
            <bullet>
              <split_impulse>1</split_impulse>
              <split_impulse_penetration_threshold>-0.01</split_impulse_penetration_threshold>
              <soft_cfm>0</soft_cfm>
              <soft_erp>0.2</soft_erp>
              <kp>1e+13</kp>
              <kd>1</kd>
            </bullet>
          </contact>
        </surface>
      </collision>
    </link>
    <static>0</static>
    <allow_auto_disable>1</allow_auto_disable>
    <joint name="kinect_joint" type="fixed">
      <axis xyz="0 1 0" />
      <origin rpy="0 0 0" xyz="0.5 0 0" />
      <parent link="base_link"/>
      <child link="kinect_link"/>
    </joint>
    <gazebo reference="kinect_link">    
      <sensor name='camera_kinect' type='depth'>
        <update_rate>20</update_rate>
        <camera name='__default__'>
          <horizontal_fov>1.0472</horizontal_fov>
          <image>
            <width>1280</width>
            <height>720</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.5</near>
            <far>15</far>
          </clip>
        </camera>
        <plugin name='camera_plugin' filename='libgazebo_ros_openni_kinect.so'>
          <baseline>0.2</baseline>
          <alwaysOn>1</alwaysOn>
          <updateRate>0.0</updateRate>
          <robotNamespace>${namespace}</robotNamespace>
          <cameraName>camera_kinect</cameraName>
          <imageTopicName>depth/image_raw</imageTopicName>
          <cameraInfoTopicName>depth/camera_info</cameraInfoTopicName>
          <depthImageTopicName>depth/depth_image_raw</depthImageTopicName>
          <depthImageInfoTopicName>depth/camera_info_depth</depthImageInfoTopicName>
          <pointCloudTopicName>depth/pointsCloud</pointCloudTopicName>
          <frameName>/uav_1</frameName>
          <!-- <frameName>${namespace}/kinect_${camera_suffix}_link</frameName> -->
          <pointCloudCutoff>0.05</pointCloudCutoff>
          <distortionK1>0</distortionK1>
          <distortionK2>0</distortionK2>
          <distortionK3>0</distortionK3>
          <distortionT1>0</distortionT1>
          <distortionT2>0</distortionT2>
          <CxPrime>0</CxPrime>
          <Cx>0</Cx>
          <Cy>0</Cy>
          <focalLength>0</focalLength>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>

    <!-- Install laser scanner: rplidar -->
    <xacro:laser_scanner
      namespace="${namespace}"
      id="0"
      pub_topic="scan"
      tf="laser_link"
      parent_link="base_link"
      update_rate="40"
      sample_count="720"
      angle_min="-1.570796"
      angle_max="1.570796"
      range_min="0.10"
      range_max="30.0"
      range_res="0.01"
      visualize="false"
      >
      <origin xyz="0 0 0.05" rpy="0 0 0" />
    </xacro:laser_scanner>

    <!-- Install laser scanner: altimeter -->
    <xacro:laser_scanner
      namespace="${namespace}"
      id="1"
      pub_topic="sf11_sim"
      tf="sf11_link"
      parent_link="base_link"
      update_rate="20"
      sample_count="1"
      angle_min="0"
      angle_max="0"
      range_min="0.10"
      range_max="120.0"
      range_res="0.01"
      visualize="true"
      >
      <origin xyz="-0.45 0 0.05" rpy="0 1.57 0" />
    </xacro:laser_scanner>

  </xacro:if>

  <xacro:if value="$(arg enable_gps_plugin)">  
    <!-- Instantiate gps plugin. -->
    <xacro:gps_plugin_macro
      namespace="${namespace}"
      gps_noise="$(arg gps_noise)"
      >
    </xacro:gps_plugin_macro>
  </xacro:if>

  <xacro:if value="$(arg enable_mavlink_interface)">
    <!-- Instantiate mavlink telemetry interface. -->
    <xacro:mavlink_interface_macro
      namespace="${namespace}"
      imu_sub_topic="/imu"
      mavlink_addr="$(arg mavlink_addr)"
      mavlink_udp_port="$(arg mavlink_udp_port)"
      >
    </xacro:mavlink_interface_macro>
  </xacro:if>

  <!-- Mount an ADIS16448 IMU. -->
  <xacro:imu_plugin_macro
    namespace="${namespace}"
    imu_suffix=""
    parent_link="base_link"
    imu_topic="/imu"
    mass_imu_sensor="0.015"
    gyroscope_noise_density="0.0003394"
    gyroscopoe_random_walk="0.000038785"
    gyroscope_bias_correlation_time="1000.0"
    gyroscope_turn_on_bias_sigma="0.0087"
    accelerometer_noise_density="0.004"
    accelerometer_random_walk="0.006"
    accelerometer_bias_correlation_time="300.0"
    accelerometer_turn_on_bias_sigma="0.1960"
  >
    <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" />
    <origin xyz="0 0 0" rpy="0 0 0" />
  </xacro:imu_plugin_macro>

  <xacro:if value="$(arg enable_ground_truth)">
    <!-- Mount an IMU providing ground truth. -->
    <xacro:imu_plugin_macro
      namespace="${namespace}"
      imu_suffix="gt"
      parent_link="base_link"
      imu_topic="ground_truth/imu"
      mass_imu_sensor="0.00001"
      gyroscope_noise_density="0.0"
      gyroscopoe_random_walk="0.0"
      gyroscope_bias_correlation_time="1000.0"
      gyroscope_turn_on_bias_sigma="0.0"
      accelerometer_noise_density="0.0"
      accelerometer_random_walk="0.0"
      accelerometer_bias_correlation_time="300.0"
      accelerometer_turn_on_bias_sigma="0.0"
    >
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" />
      <origin xyz="0 0 0" rpy="0 0 0" />
    </xacro:imu_plugin_macro>

    <!-- Mount a generic odometry sensor providing ground truth. -->
    <xacro:odometry_plugin_macro
      namespace="${namespace}/ground_truth"
      odometry_sensor_suffix="gt"
      parent_link="base_link"
      pose_topic="pose"
      pose_with_covariance_topic="pose_with_covariance"
      position_topic="position"
      transform_topic="transform"
      odometry_topic="odometry"
      parent_frame_id="world"
      mass_odometry_sensor="0.00001"
      measurement_divisor="1"
      measurement_delay="0"
      unknown_delay="0.0"
      noise_normal_position="0 0 0"
      noise_normal_quaternion="0 0 0"
      noise_normal_linear_velocity="0 0 0"
      noise_normal_angular_velocity="0 0 0"
      noise_uniform_position="0 0 0"
      noise_uniform_quaternion="0 0 0"
      noise_uniform_linear_velocity="0 0 0"
      noise_uniform_angular_velocity="0 0 0"
      enable_odometry_map="false"
      odometry_map=""
      image_scale=""
    >
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> <!-- [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] -->
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
    </xacro:odometry_plugin_macro>
  </xacro:if>

  <xacro:if value="$(arg enable_logging)">
    <!-- Instantiate a logger -->
    <xacro:bag_plugin_macro
      namespace="${namespace}"
      bag_file="$(arg log_file)"
      rotor_velocity_slowdown_sim="${rotor_velocity_slowdown_sim}"
    >
    </xacro:bag_plugin_macro>
  </xacro:if>

</robot>
