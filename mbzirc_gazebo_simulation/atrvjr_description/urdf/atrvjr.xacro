<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="atrvjr">
    <xacro:macro name="atrvjr">

      <!-- xacro parameters -->
      <xacro:property name="M_PI" value="3.14159"/>

      <!-- Robot parameters -->
      <xacro:property name="center_height" value="0.1525" />
      <!-- This is not including the bumpers -->
      <xacro:property name="chassis_length" value="0.64" />
      <!-- This is including the bumpers -->
      <xacro:property name="chassis_length_bumpers" value="0.78" />
      <!-- This is not including the wheels -->
      <xacro:property name="chassis_width" value="0.385" />
      <!-- This is not including equipment and racks on the top -->
      <xacro:property name="chassis_height" value="0.42" />
      <!-- Wheel properties -->
      <xacro:property name="wheel_radius" value="0.155"/>
      <xacro:property name="wheel_width" value="0.095"/>
      <xacro:property name="wheel_base" value="0.38"/> <!-- aka distance between axis -->

      <!-- xacro macros -->
      <xacro:macro name="cylinder_inertial" params="mass radius height">
          <inertial>
            <mass value="${mass}" />
            <inertia ixx="${(1.0/12.0)*mass*(3*radius*radius+3*height*height)}" ixy="0.0" ixz="0.0"
                     iyy="${(1.0/12.0)*mass*(3*radius*radius+3*height*height)}" iyz="0.0"
                     izz="${(1.0/2.0)*mass*radius*radius}" />
          </inertial>
      </xacro:macro>

      <xacro:macro name="wheel" params="prefix reflect_x reflect_y">
          <link name="${prefix}_wheel_link">
              <xacro:cylinder_inertial mass="1" radius="${wheel_radius}" height="${wheel_width}"/>
              <visual>
                  <origin xyz="0 0 0" rpy="0 0 0" />
                  <geometry>
                      <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                  </geometry>
              </visual>
              <collision>
                  <origin xyz="0 0 0" rpy="0 0 0" />
                  <geometry>
                      <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                  </geometry>
              </collision>
          </link>

          <gazebo reference="${prefix}_wheel_link">
      			<mu1 value="1.0"/>
      			<mu2 value="1.0"/>
      			<kp value="10000000.0" />
      			<kd value="1.0" />
      			<fdir1 value="0 0 1"/>
            <material>Gazebo/Black</material>
      		</gazebo>

          <!-- base_link -> ${prefix}_wheel_link -->
          <joint name="${prefix}_wheel_joint" type="continuous">
              <parent link="center_link"/>
              <child link="${prefix}_wheel_link"/>
              <origin xyz="${(wheel_base/2)*reflect_x} ${(chassis_width/2 + 0.1)*reflect_y} 0"
              rpy="${-(M_PI/2)} 0 0"/>
              <axis xyz="0 0 1" rpy="0 0 0" />
          </joint>

      		<transmission name="${prefix}__wheel_trans" type="SimpleTransmission">
      			<type>transmission_interface/SimpleTransmission</type>
      			<actuator name="${prefix}__wheel_motor">
      				<mechanicalReduction>1</mechanicalReduction>
      			</actuator>
      			<joint name="${prefix}_wheel_joint">
      				<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      			</joint>
      		</transmission>

      </xacro:macro>

      <!-- left_front_wheel_link -->
      <xacro:wheel prefix="left_front" reflect_x="1" reflect_y="1" />
      <!-- left_rear_wheel_link -->
      <xacro:wheel prefix="left_rear" reflect_x="-1" reflect_y="1" />
      <!-- right_front_wheel_link -->
      <xacro:wheel prefix="right_front" reflect_x="1" reflect_y="-1" />
      <!-- right_rear_wheel_link -->
      <xacro:wheel prefix="right_rear" reflect_x="-1" reflect_y="-1" />

      <!-- links -->
      <!-- base_link -->
      <!-- The frame of the floor directly below the center_link and -->
      <!-- is needed for the navigation stack to work properly -->
      <link name="base_link"></link>

      <!-- center_link -->
      <!-- The link that is the origin of all of the components of the -->
      <!-- robot and should also represent the main chassis via inertial, -->
      <!-- visual, and geometry elements of the link -->
      <xacro:macro name="cuboid_inertial" params="mass d w h">
          <inertial>
            <origin xyz="0 0 ${chassis_height/2.0 - 0.10}" rpy="0 0 0"/>
            <mass value="${mass}" />
            <inertia ixx="${(1.0/12.0)*mass*(h*h+w*w)}" ixy="0.0" ixz="0.0"
                     iyy="${(1.0/12.0)*mass*(h*h+d*d)}" iyz="0.0"
                     izz="${(1.0/12.0)*mass*(w*w+d*d)}" />
          </inertial>
      </xacro:macro>

      <link name="center_link">
          <xacro:cuboid_inertial mass="50" d="${chassis_length}" w="${chassis_width}" h="${chassis_height}"/>

          <visual>
              <geometry>
                  <mesh filename="package://atrvjr_description/meshes/atrv_body.dae"/>
              </geometry>
          </visual>

          <collision>
              <origin xyz="0 0 ${chassis_height/2.0 - 0.10}" rpy="0 0 0" />
              <geometry>
                  <box size="${chassis_length} ${chassis_width} ${chassis_height}" />
              </geometry>
          </collision>
      </link>

      <!-- base_link -> center_link -->
      <joint name="base_link_joint" type="fixed">
          <origin xyz="0 0 ${center_height}" rpy="0 0 0"/>
          <parent link="base_link"/>
          <child link="center_link"/>
      </joint>

      <!-- Hokuyo Link -->
      <link name="hokuyo_link">
        <collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="0.1 0.1 0.1"/>
          </geometry>
        </collision>

        <visual>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="0.1 0.1 0.1"/>
          </geometry>
        </visual>

        <inertial>
          <mass value="1e-5" />
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
        </inertial>
      </link>

      <joint name="hokuyo_joint" type="fixed">
          <origin xyz="${chassis_length/2+0.1} 0 0" rpy="0 0 0"/>
          <parent link="center_link"/>
          <child link="hokuyo_link"/>
      </joint>

      <gazebo reference="hokuyo_link">
        <sensor type="ray" name="head_hokuyo_sensor">
          <pose>0 0 0 0 0 0</pose>
          <visualize>false</visualize>
          <update_rate>40</update_rate>
          <ray>
            <scan>
              <horizontal>
                <samples>720</samples>
                <resolution>1</resolution>
                <min_angle>-1.570796</min_angle>
                <max_angle>1.570796</max_angle>
              </horizontal>
            </scan>
            <range>
              <min>0.20</min>
              <max>30.0</max>
              <resolution>0.01</resolution>
            </range>
            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.01</stddev>
            </noise>
          </ray>
          <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
            <topicName>/scan</topicName>
            <frameName>hokuyo_link</frameName>
          </plugin>
        </sensor>
      </gazebo>

      <gazebo>
        <!-- <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
          <robotNamespace></robotNamespace>
          <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
          <legacyModeNS>true</legacyModeNS>
        </plugin> -->

        <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
              <alwaysOn>true</alwaysOn>
              <updateRate>30.0</updateRate>
              <bodyName>base_link</bodyName>
              <topicName>base_pose_ground_truth</topicName>
              <gaussianNoise>0.01</gaussianNoise>
              <frameName>map</frameName>
              <xyzOffsets>0 0 0</xyzOffsets>
              <rpyOffsets>0 0 0</rpyOffsets>
        </plugin>
      </gazebo>

    </xacro:macro>
</robot>
